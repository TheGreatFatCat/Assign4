/* 
Authors: Andrew Smith, Michael Miller, Dylan Lynn
Date: 4/x/2018
Overview: Solve minimum change coin change problem using dynamic 
          programming and JUnit testing. Problem solved with iterations
*/


package programmingassignment4;

public class Method{
    
    public static int[] makeChange(int[] coins, int amount){
        
        if(coins.length == 0) {
			
            throw new IllegalArgumentException("Must input coins.");
	}
        
        int total[] = new int[amount + 1];
        int coinUsed[] = new int[amount + 1];
        
        total[0] = 0;
        
        for(int i = 1; i <= amount; i++){
            
            total[i] = Integer.MAX_VALUE-1;
            coinUsed[i] = -1;
        }
        for(int j = 0; j < coins.length; j++){
            for(int i = 1; i <= amount; i++){
                if(i >= coins[j]){
                    if (total[i - coins[j]] + 1 < total[i]) {
                        
                        total[i] = 1 + total[i - coins[j]];
                        coinUsed[i] = j;
                    }
                }
            }
        }              
        int i = 0;
        int index = amount;
        int answer[] = new int[total[index]];
        
        while(index != 0){           
            
            int j = coinUsed[index]; 
            answer[i] = coins[j];
            index = index - coins[j];
            i++;
//            System.out.println(coins[j]);         //prints to console to check
        }
        return answer;
    }
}







/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package programmingassignment4;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Michael
 */
public class MethodTest {
    
    public MethodTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of makeChange method, of class Method.
     */
  @Test()
    public void test1() {
        System.out.println("Test1");
        
        int[] coins = {25, 21, 10, 5, 1};
        int[] result1 = Method.makeChange(coins, 63);
        int[] expectedResult1 = {21,21,21};       
        assertArrayEquals(expectedResult1, result1);       
    }
 @Test()
    public void test2(){
        System.out.println("Test2");
        
        int[] coins = {25, 10, 5, 1};
        int[] result2 = Method.makeChange(coins, 74);
        int[] expectedResult2 = {1,1,1,1,10,10,25,25};       
        assertArrayEquals(expectedResult2, result2);  
    }
    
    @Test()
    public void test3(){
        System.out.println("Test3");
        
        int[] coins = {20, 14, 8, 5, 1};
        int[] result3 = Method.makeChange(coins, 57);
        int[] expectedResult3 = {1,14,14,14,14};       
        assertArrayEquals(expectedResult3, result3);  
    } 
    
    @Test(expected = IllegalArgumentException.class)
    public void test4(){
        System.out.println("Test4");
        
        int[] coins = {};
        int[] result4 = Method.makeChange(coins, 50);
        int[] expectedResult4 = {1,2,3,4,5};       
        assertArrayEquals(expectedResult4, result4);  
    }    
}

